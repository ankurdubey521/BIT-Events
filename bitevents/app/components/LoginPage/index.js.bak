import React from 'react';
import {
	View,
	Text,
	TouchableOpacity,
	ImageBackground,
	StyleSheet,
	Image,
	Dimensions,
	StatusBar
} from 'react-native';
import { TextInput } from 'react-native-gesture-handler';
import Icon from 'react-native-vector-icons/Ionicons';

import bgimage from './back.jpg';
//url image_background https://www.imgbase.info/images/safe-wallpapers/digital_art/3d/44428_3d_blue_black_black_and_blue_cubes.jpg
import logo from './logo.png';
//url logo https://upload.wikimedia.org/wikipedia/en/d/d2/Birla_Institute_of_Technology_Mesra.png

/**
 * We can have only one instance of firebase app configured at a time, so I'm using a 
 * singelton class to provide a configured firebase object wherever required. Confiuration does not 
 * need to be done explicitly
 */
import firebase from '../../firebaseRealtimeDatabaseConfig';

const { width: WINDOW_WIDTH } = Dimensions.get('window');

export default class LoginPage extends React.Component {
	constructor() {
		super();
		this.onPress = this.onPress.bind(this);
		this.state = { email: '', password: '', error: '', loggedIn:false};
	}
	componentDidMount() {
		//Removed Configuration
		firebase.auth().onAuthStateChanged((user) => {
			if (user) {
				this.setState({ loggedIn: true });
			} else {
				this.setState({ loggedIn: false });
			}
		});
	}

	onButtonPress() {
		this.setState({ error: '', loading: true });
		const { email, password } = this.state;
		firebase.auth().signInWithEmailAndPassword(email, password).then(this.onLoginSuccess.bind(this)).catch(() => {
			firebase
				.auth()
				.createUserWithEmailAndPassword(email, password)
				.then(this.onLoginSuccess.bind(this))
				.catch((error) => {
					let errorCode = error.code;
					let errorMessage = error.message;
					if (errorCode == 'auth/weak-password') {
						this.onLoginFailure.bind(this)('Weak password!');
					} else {
						this.onLoginFailure.bind(this)(errorMessage);
					}
				});
		});
	}

	onLoginSuccess() {
		this.setState({
			email: '',
			password: '',
			error: '',
			loading: false,
			loggedIn:true
		});
	}
	onLoginFailure(errorMessage) {
		this.setState({ error: errorMessage, loading: false });
	}
	onPress() {
		this.props.navigation.navigate('Home');
	}
	render() {
		StatusBar.setBackgroundColor('black', true);
		return (
			<ImageBackground source={bgimage} style={styles.backGroundContainer}>
				<View style={styles.logoContainer}>
					<Image source={logo} style={styles.logo} />
					<Text style={styles.logoText}>BIT EVENTS</Text>
				</View>
				<View style={styles.inputContainer}>
					<Icon name={'ios-person'} size={28} color={'rgba(255,255,255,0.7)'} style={styles.inputIcon} />
					<TextInput
						style={styles.input}
						placeholder={'Username'}
						placeholderTextColor={'rgba(255,255,255,0.7)'}
						underlineColorAndroid="transparent"
					/>
				</View>
				<View style={styles.inputContainer}>
					<Icon name={'ios-lock'} size={28} color={'rgba(255,255,255,0.7)'} style={styles.inputIcon} />
					<TextInput
						style={styles.input}
						placeholder={'Password'}
						secureTextEntry={true}
						placeholderTextColor={'rgba(255,255,255,0.7)'}
						underlineColorAndroid="transparent"
					/>
					<TouchableOpacity style={styles.eye}>
						<Icon name={'ios-eye'} size={26} color={'rgba(255,255,255,0.7)'} />
					</TouchableOpacity>
				</View>
				<TouchableOpacity style={styles.login} onPress={this.onButtonPress.bind(this)} onPress={this.onPress}>
					{
						//Fixed syntax
						console.log(this.state.loggedIn)
					}
					{this.state.loggedIn ? (
						<Text style={styles.text}>Sign Out</Text>
					) : (
						<Text style={styles.text}>Login</Text>
					)}
					<Text style={styles.errorTextStyle}>{this.state.error}</Text>
				</TouchableOpacity>
			</ImageBackground>
		);
	}
}
/*
const styles = StyleSheet.create({
	backGroundContainer: {
		flex: 1,
		height: null,
		width: null,
		justifyContent: 'center',
		alignItems: 'center'
	},
	logo: {
		width: 120,
		height: 120
	},
	logoContainer: {
		alignItems: 'center',
		marginBottom: 50
	},
	logoText: {
		color: 'white',
		fontSize: 20,
		fontWeight: '500',
		marginTop: 10,
		opacity: 0.5
	},
	input: {
		width: WIDTH - 55,
		height: 25,
		borderRadius: 25,
		fontSize: 16,
		paddingLeft: 45,
		backgroundColor: 'rgba(255,255,255,0.7)',
		color: 'rgba(255,255,255,0.7)',
		marginHorizontal: 25
	},
	inputIcon: {
		position: 'absolute',
		top: 8,
		left: 37,
		width: 10
	},
	inputContainer: {
		marginTop: 10,
		height: 50
	},
	eye: {
		position: 'absolute',
		top: 8,
		right: 37
	},
	login: {
		width: WIDTH - 55,
		height: 25,
		borderRadius: 25,
		marginTop: 20,
		justifyContent: 'center',
		backgroundColor: '#00ff80'
	},
	text: {
		color: 'rgba(255,255,255,0.7)',
		fontSize: 
		textAlign: 'center'
	},
	errorTextStyle: {
		fontSize: 18,
		alignSelf: 'center',
		color: 'white'
	}
});*/

const styles = StyleSheet.create({
	backGroundContainer: {
		flex: 1,
		height: null,
		width: null,
		justifyContent: 'center',
		alignItems: 'center'
	},
	logo: {
		width: 120,
		height: 120
	},
	logoContainer: {
		alignItems: 'center',
		marginBottom: 50
	},
	logoText: {
		color: 'white',
		fontSize: 20,
		fontWeight: '500',
		marginTop: 10,
		opacity: 0.5
	},
	input: {
		width: WINDOW_WIDTH - 55,
		height: 50,
		borderRadius: 25,
		fontSize: 16,
		paddingLeft: 45,
		backgroundColor: 'rgba(255,255,255,0.7)',
		color: 'rgba(255,255,255,0.7)',
		marginHorizontal: 25
	},
	inputIcon: {
		position: 'absolute',
		top: 8,
		left: 40,
		width: 10
	},
	inputContainer: {
		marginTop: 10,
		height: 30,
		paddingBottom: 60
	},
	eye: {
		position: 'absolute',
		top: 8,
		right: 37
	},
	login: {
		width: WINDOW_WIDTH - 55,
		height: 50,
		borderRadius: 25,
		marginTop: 20,
		alignContent:'center',
		justifyContent: 'center',
		backgroundColor: '#00ff80'
	},
	text: {
		paddingTop:10,
		color: 'rgba(255,255,255,0.7)',
		fontSize: 30,
		fontWeight: 'bold',
		textAlign: 'center'
	}
});